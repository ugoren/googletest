// This file was GENERATED by command:
//     pump.py gmock-generated-p99.h.pump
// DO NOT EDIT BY HAND!!!


// Copyright 2018, Jens Gustedt,
//                 Uri Goren
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// P99 code ported into Google Mock
// The macros actually used in Google Mock are:
//   __GMOCK_P99_NARG
//   __GMOCK_P99_SELS

#ifndef GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_P99_H_
#define GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_P99_H_

//
// Taken from p99_block.h
//

#define __GMOCK_P00_ROBUST(...) __VA_ARGS__


//
// Taken from p99_paste.h
//


/**
 ** @brief Paste two token sequences at their junction.
 **
 ** This macro does the paste operation first, and then an evaluation
 ** of the result. Thus
 ** @code
 ** #define B(x) toto(x)
 ** __GMOCK_P99_CAT2(A, B(6));
 ** @endcode
 ** will result in
 ** @code
 ** AB(6);
 ** @endcode
 ** and not in
 ** @code
 ** Atoto(6)
 ** @endcode
 **/
#define __GMOCK_P99_CAT2(_1, _2) _1 ## _2

/**
 ** @brief Paste two token sequences at their junction.
 **
 ** This macro does the evaluation of the arguments first and then
 ** proceeds with the concatenation
 ** of the results. Thus
 ** @code
 ** #define B(x) toto(x)
 ** __GMOCK_P99_CAT2(A, B(6));
 ** @endcode
 ** will result in
 ** @code
 ** Atoto(6)
 ** @endcode
 ** and not in
 ** @code
 ** AB(6);
 ** @endcode
 **/
#define __GMOCK_P99_PASTE2(_1, _2) __GMOCK_P99_CAT2(_1, _2)
#define __GMOCK_P99_PASTE3(_1,  _2, _3)                                \
  __GMOCK_P99_PASTE2(__GMOCK_P99_PASTE2(_1, _2), _3)
#define __GMOCK_P99_PASTE4(_1,  _2, _3, _4)                            \
  __GMOCK_P99_PASTE2(__GMOCK_P99_PASTE3(_1, _2, _3), _4)
#define __GMOCK_P99_PASTE5(_1,  _2, _3, _4, _5)                        \
  __GMOCK_P99_PASTE2(__GMOCK_P99_PASTE4(_1, _2, _3, _4), _5)
#define __GMOCK_P99_PASTE6(_1,  _2, _3, _4, _5, _6)                    \
  __GMOCK_P99_PASTE2(__GMOCK_P99_PASTE5(_1, _2, _3, _4, _5), _6)

//
// Taken from p99_generated.h
// Rewritten to be pump-generated.
//
#define __GMOCK_P00_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, ...) _11

#define __GMOCK_P00_NARG_1(...) __GMOCK_P00_ARG(__VA_ARGS__, 10, 9, 8, 7, 6, \
    5, 4, 3, 2, 1, 0, )

#define __GMOCK_P00_NARG_2(...) __GMOCK_P00_ARG(__VA_ARGS__,  5, \
    __GMOCK_P00_INV(2), 4, __GMOCK_P00_INV(2), 3, __GMOCK_P00_INV(2), 2, \
    __GMOCK_P00_INV(2), 1, __GMOCK_P00_INV(2), 0,)

/** @brief Determine of the argument list has a comma,
    i.e at least two arguments. */
#define __GMOCK_P99_HAS_COMMA(...) __GMOCK_P00_ARG(__VA_ARGS__, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 0, 0)
#define __GMOCK_P00_PRE2(_0, ...) _0, __GMOCK_P00_PRE1(__VA_ARGS__)
#define __GMOCK_P00_PRE3(_0, ...) _0, __GMOCK_P00_PRE2(__VA_ARGS__)
#define __GMOCK_P00_PRE4(_0, ...) _0, __GMOCK_P00_PRE3(__VA_ARGS__)
#define __GMOCK_P00_PRE5(_0, ...) _0, __GMOCK_P00_PRE4(__VA_ARGS__)
#define __GMOCK_P00_PRE6(_0, ...) _0, __GMOCK_P00_PRE5(__VA_ARGS__)
#define __GMOCK_P00_PRE7(_0, ...) _0, __GMOCK_P00_PRE6(__VA_ARGS__)
#define __GMOCK_P00_PRE8(_0, ...) _0, __GMOCK_P00_PRE7(__VA_ARGS__)
#define __GMOCK_P00_PRE9(_0, ...) _0, __GMOCK_P00_PRE8(__VA_ARGS__)
#define __GMOCK_P00_PRE10(_0, ...) _0, __GMOCK_P00_PRE9(__VA_ARGS__)
#define __GMOCK_P00_MAP_2(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_1(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_3(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_2(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_4(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_3(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_5(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_4(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_6(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_5(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_7(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_6(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_8(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_7(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_9(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_8(MAC, SEP, \
    __VA_ARGS__)
#define __GMOCK_P00_MAP_10(MAC, SEP, X, \
    ...) MAC(X)__GMOCK_P00_ROBUST SEP __GMOCK_P00_MAP_9(MAC, SEP, \
    __VA_ARGS__)

//
// Taken from p99_args.h
//

/**
 ** @brief Return the length of the variate argument list.
 **
 ** This supposes that the length is less than ::P99_MAX_NUMBER.
 **
 ** Idea is due to Laurent Deniau, CERN, and taken from a discussion
 ** in comp.lang.c.
 **
 ** @warning this also counts an empty argument list as having one (=
 ** the empty) argument
 ** @see __GMOCK_P99_NARG for a macro that returns 0 if the list is empty
 **/
#define __GMOCK_P00_NARG(...) __GMOCK_P00_NARG_1(__VA_ARGS__)


#define __GMOCK_P00_IS__EQ__(...) ,

/**
 ** @brief Test if the argument list is empty.
 **
 ** This expands to token 1 if the list was empty and to token 0 if
 ** there was anything other than a comment in the list.
 **
 ** The implementation of this macro is kind of tricky and relies heavily
 ** on the fact that a function macro (@c __GMOCK_P00_IS__EQ__ in this case) is
 ** left untouched if it is not followed by a parenthesis. See
 ** http://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/
 **
 ** @return tokens 0 or 1
 **
 ** @warning This macro should work for most reasonable invocations
 ** (balanced parenthesis and stuff like that). The only case that
 ** definitely does not work is when called with another macro @c X
 ** at the end of its argument list, where X itself expects more than one
 ** argument.
 ** The particular cases where X receives @c 0, @c 1 or a
 ** variable number of arguments should be fine.
 **/
#define __GMOCK_P99_IS_EMPTY(...) \
    \
__GMOCK_P00_ISEMPTY( \
    \
            /* test if there is just one argument, that might be empty */ \
             __GMOCK_P99_HAS_COMMA(__VA_ARGS__), \
                 \
             /* test if __GMOCK_P99_IS__EQ__ together with the argument \
                 \
                adds a comma */                                           \
             __GMOCK_P99_HAS_COMMA(__GMOCK_P00_IS__EQ__ __VA_ARGS__), \
                 \
             /* test if the argument together with a parenthesis          \
                adds a comma */                                           \
             __GMOCK_P99_HAS_COMMA(__VA_ARGS__ (/*empty*/)), \
                 \
             /* test if placing it between __GMOCK_P99_IS__EQ__ and the \
                 \
                parenthesis adds a comma */                               \
             __GMOCK_P99_HAS_COMMA(__GMOCK_P00_IS__EQ__ __VA_ARGS__ \
                 (/*empty*/))          \
             )

#define __GMOCK_P00_ISEMPTY(_0, _1, _2, \
    _3) __GMOCK_P99_HAS_COMMA(__GMOCK_P99_PASTE5(__GMOCK_P00_IS_EMPTY_CASE_, \
    _0, _1, _2, _3))
#define __GMOCK_P00_IS_EMPTY_CASE_0000 __GMOCK_P00_IS_EMPTY_CASE_0000
#define __GMOCK_P00_IS_EMPTY_CASE_0001 ,
#define __GMOCK_P00_IS_EMPTY_CASE_0010 __GMOCK_P00_IS_EMPTY_CASE_0010
#define __GMOCK_P00_IS_EMPTY_CASE_0011 __GMOCK_P00_IS_EMPTY_CASE_0011
#define __GMOCK_P00_IS_EMPTY_CASE_0100 __GMOCK_P00_IS_EMPTY_CASE_0100
#define __GMOCK_P00_IS_EMPTY_CASE_0101 __GMOCK_P00_IS_EMPTY_CASE_0101
#define __GMOCK_P00_IS_EMPTY_CASE_0110 __GMOCK_P00_IS_EMPTY_CASE_0110
#define __GMOCK_P00_IS_EMPTY_CASE_0111 __GMOCK_P00_IS_EMPTY_CASE_0111
#define __GMOCK_P00_IS_EMPTY_CASE_1000 __GMOCK_P00_IS_EMPTY_CASE_1000
#define __GMOCK_P00_IS_EMPTY_CASE_1001 __GMOCK_P00_IS_EMPTY_CASE_1001
#define __GMOCK_P00_IS_EMPTY_CASE_1010 __GMOCK_P00_IS_EMPTY_CASE_1010
#define __GMOCK_P00_IS_EMPTY_CASE_1011 __GMOCK_P00_IS_EMPTY_CASE_1011
#define __GMOCK_P00_IS_EMPTY_CASE_1100 __GMOCK_P00_IS_EMPTY_CASE_1100
#define __GMOCK_P00_IS_EMPTY_CASE_1101 __GMOCK_P00_IS_EMPTY_CASE_1101
#define __GMOCK_P00_IS_EMPTY_CASE_1110 __GMOCK_P00_IS_EMPTY_CASE_1110
#define __GMOCK_P00_IS_EMPTY_CASE_1111 __GMOCK_P00_IS_EMPTY_CASE_1111


#define __GMOCK_P00_NARG_EMPTY_1(VAL) 0
#define __GMOCK_P00_NARG_EMPTY_0(VAL) VAL

/**
 ** @brief Return the length of the variable length argument list,
     where an empty
 ** argument list is considered to have 0 arguments.
 **
 ** This supposes that the length of the list is less than ::P99_MAX_NUMBER.
 **
 ** @see __GMOCK_P00_NARG for a macro in which an empty list is considered to
     have 1 argument.
 **/
#define __GMOCK_P99_NARG(...) \
    __GMOCK_P00_NARG__1(__GMOCK_P99_IS_EMPTY(__VA_ARGS__), \
    __GMOCK_P00_NARG(__VA_ARGS__))
#define __GMOCK_P00_NARG__1(B, \
    VAL) __GMOCK_P00_NARG__2(__GMOCK_P99_PASTE2(__GMOCK_P00_NARG_EMPTY_, B), \
    VAL)
#define __GMOCK_P00_NARG__2(B, VAL) B(VAL)


//
// Taken from p99_list.h
//

#define __GMOCK_P00_PRE0(...)
#define __GMOCK_P00_PRE1(_0, ...) _0

/**
 ** Cut the argument list at position @a N
 **/
#define __GMOCK_P99_SELS(N, ...) __GMOCK_P99_PASTE2(__GMOCK_P00_PRE, \
    N)(__VA_ARGS__)

// Helpers for __GMOCK_P99_SER

#define __GMOCK_P00_MAP_1(MAC, SEP, ...) MAC(__VA_ARGS__)
#define __GMOCK_P00_MAP_0(...)

#define __GMOCK_P00_MAP_0_(N, MAC, SEP, ...) __GMOCK_P00_MAP_ ## N(MAC, SEP, \
    __VA_ARGS__)

#define __GMOCK_P00_MAP_(...) __GMOCK_P00_MAP_0_(__VA_ARGS__)

//
// Taken from p99_for.h
//

/**
 ** @brief Apply the macro @a MACRO to the rest of the argument list.
 **
 ** The macro is called with each of the other arguments and
 ** the results are separated by a space token.
 **
 ** @see P99_UNROLL for a similar macro that applies @a MACRO a fixed number of
     times
 ** @see P99_SEQ for a similar macro that separates the different parts with a
     @c ,
 ** @see P99_SER for a similar macro that separates the different parts with a
     space token
 ** @see P99_FOR for a more generic and flexible utility
 **/
#define __GMOCK_P99_SER(MACRO, \
    ...) __GMOCK_P00_MAP_(__GMOCK_P99_NARG(__VA_ARGS__), MACRO, ( ), \
    __VA_ARGS__)

#define __GMOCK_P99_SEQ(MACRO, \
    ...) __GMOCK_P00_MAP_(__GMOCK_P99_NARG(__VA_ARGS__), MACRO, (,), \
    __VA_ARGS__)

#endif // GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_P99_H_
